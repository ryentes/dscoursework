head(what)
plants
what
swirl()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
con
thing
read.table(readLines(thing), header=TRUE)
read.csv(thing)
what <- read.csv(thing)
str(ting)
str(thing)
str(what)
str(plants)
head(plants)
head(what)
what2 <- subset(what, subset=what[3:12])
?subset
what2 <- subset(what, select=what[,3:12])
what2 <- what[,3:12]
what2 == plants
plants
what
what2
class(plants)
class(what2)
class(what2[,1])
class(plants[,1])
class(plants[,5])
class(what2[,5])
thing <- what2==plants
plants2 <- as.matrix(plants)
what3 <- as.matrix(what2)
plants2 == what3
test <- what3 == plants2
test <- complete.cases(plants2) == complete.cases(what3)
test
rm(ls())
rm(list=ls())
library(swirl)
swirl()
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10, replace=FALSE)
sample(10:20, 10, replace=FALSE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace=TRUE, prob= c(.3,.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob= c(.3,.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob = .7)
play()
?dchi
?dchisq
dchisq(.001, 212)
dchisq(.999, 212)
qchisq(.001, 212)
qchisq(.999, 212)
qchisq(.999, 36)
qchisq(.999, 35)
qchisq(.001, lower.tail = TRUE 35)
qchisq(.001, lower.tail = TRUE, 35)
qchisq(.001, lower.tail = FALSE, 35)
nxt()
?rbinom
rbinom(100, size=100, .7)
rbinom(1, size=100, .7)
rbinom(1, size=1, .7)
rbinom(100, size=1, .7)
flips2 <- rbinom(100, size=1, .7)
flips2
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(mean=100, sd=25)
rnorm(100, mean=100, sd=25)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5, lambda=10)
my_pois <- replicate(100, rpois(5,10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
?plot
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim = c(10,15)
)
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(data=mtcars, formula= mpg~cyl)
boxplot(mtcars, formula= mpg~cyl)
boxplot(formula= mpg~cyl, data=mtcars)
hist(mtcars$mpg)
swirl()
swirl()
d1 <- Sys.Date()
class(d1)
d1
unclass(d1)
d1
d1 <- as.Date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
as.Date(-730)
?as.Date.numeric
as.Date(-730, 0)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays((d1))
weekdays(d1)
months(t1)
quarters(t2)
t3 <- October 17, 1986 08:24""
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units ='days')
rm(list=ls())
site <- "https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt"
data <- readLines(site)
data
data <- read.csv(readLines(site))
data <- read.table(readLines(site))
readLines(site)
read.csv(readLines(site))
site
site <- http://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt
read.csv(readLines(site))
head(readLines(site))
read.table(head(readLines(site)))
read.csv(head(readLines(site)))
?file
site <- (url="https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt", "r")
?con
?url
site <- url('https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt', "r")
data <- read.csv(readLines(site))
data <- read.table(readLines(site))
site
as.data.frame(readLines(site))
readLines(sit)
readLines(site)
site
site <- https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt
site <- "https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt"
readLines(site)
as.data.frame(readLines(site))
?as.data.frame
?read.csv
read.csv(readLines(site), stringsAsFactors = FALSE)
read.csv(readLines(site), stringsAsFactors = TRUE)
library(RCurl)
site <- getURL(site)
data <- read.csv(tex=site)
data
data <- data[3:12]
head(data)
swirl()
all(data == plants)
all(as.matrix(data) == as.matrix(plants))
as.matrix(data) == as.matrix(plants)
View(data)
View(plants)
View(data)
one <- c(1,1,1)
two <- c(2,2,2)
three <- c(3,3,3)
test <- c(one, two, three)
test
test <- cbind(1,2,3)
test
test <- cbind(one, two, three)
test
test[three, 1:2]
test[,c(three, one, two)]
test[,three, one, two]
test[,(three,one, two)]
test[,order(three,one,two)]
order(test[,3])
test[,three two one]
test[,3 2 1]
test[,c(3 2 1)]
test[,c("three" "two" "one")]
test[, 1]
test[, 1:2]
test[,3 1:2]
test[, 1 2]
test[, c(1,2)]
test[, c(3,1,2)]
test[, c("three","one", "two")]
data <- EuStockMarkets
head(data)
debugSource('C:/wf/careless/psy.syn.v3.R')
install.packages("Hmisc")
x
x <- EuStockMarkets
head(x)
install.packages("Hmisc")
debugSource('C:/wf/careless/psy.syn.v3.R')
psy.syn(x,.97,FALSE)
head(x)
getItemPairs(x)
getItemPairs(x,.97)
psy.syn(x,.97)
psy.syn(x,.97)
psy.syn(x,.97)
psy.syn <- function(data, critVal=.60, anto=FALSE) {
data <- as.matrix(data)
data <- as.matrix(data)
data <- as.matrix(data)
x
data <- as.matrix(x)
x[1,1]
x
data
class(x)
what <- function(data) {}
what <- function(data) {
data <- as.matrix(data)
print(head(data))
}
what(x)
debugSource('C:/wf/careless/psy.syn.v3.R')
psy.syn(x,.97)
psy.syn(x,.97)
data[1,1]
cross_products[1]
x_squares[1]
digits(10)
psy.syn(x,.97)
psy.syn(x,.97)
cross_products[1]
options(digits=15)
cross_products[1]
x <- EuStockMarkets
head(x)
getItemPairs
getItemPairs(x, .97)
case <- x[1,]
case
DAX = case[1]
SMI = case[2]
CAC = case[3]
FTSE = case[4]
SMI * DAX
dax = DAX
smi = SMI
cac = CAC
ftse = FTSE
smi^2
dax^2
ftse*dax
ftse*dax
ftse^2
dax^2
ftse*smi
ftse^2
smi^2
smi + ftse + ftse
dax + dax + smi
2733205.375 + 3980013.5 + 4100605.16
2816019.61 + 5971180.96 + 5971180.96
2652826.5625 +  2652826.5625 + 2816019.61
6565.3/3
6565.3/3
4935.6/3
10813824.035 - (3*2188.43333333333*1645.2)
14758381.53 - (3*(2188.43333333333^2))
8121672.735 - (3*(1645.2^2))
sqrt(390660.166666707*1623.61500000022)
12592.4750000164/25184.950000003
?getenv
r.getenv()
getenv()
sys.genv()
sys.getenv()
Sys.getenv()
?update.packages
update.packages(checkBuilt = TRUE, ask=FALSE)
setwd("C:\\wf\\coursera3")
list.files()
library("xlsx")
install.packages("xlsx")
list.files()
rowindex <- 18:23
colindex <- 7:15
dat <- read.xlsx("quiz1-2.xlsx", sheetIndex=1, colIndex=colindex, rowIndex=rowindex, header=TRUE)
library("xlsx")
dat <- read.xlsx("quiz1-2.xlsx", sheetIndex=1, colIndex=colindex, rowIndex=rowindex, header=TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="quiz1-2.xlsx", mode="wb")
dat <- read.xlsx("quiz1-2.xlsx", sheetIndex=1, colIndex=colindex, rowIndex=rowindex, header=TRUE)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
?read.xml
install.packages("read.xml")
?xmlParse
xmlparse
?xmlparse
install.packages("xml")
y
install.packages("XML")
library("XML")
?parseXMLAndAdd
?xmlParse
data <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternalNodes = TRUE)
install.packages("rcurl")
install.packages("Rcurl")
install.packages("RCurl")
library("RCurl")
url <- "Error: XML content does not seem to be XML: 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
data <- getURL(url)
data <- getURL(url, ssl.verifyPeer=FALSE)
x <- xmlTreeParse(data, useInternalNodes = TRUE)
x
?rootnote
?rootnode
xpathSApply(x, "//restaurant[@zipcode]"
)
xpathSApply(x, "//restaurant[@zipcode]", xmlValue("zipcode")
)
xpathSApply(x, "//restaurant[@zipcode]", xmlAttributeType("zipcode")
)
getNodeSet(x)
?getNodeSet
?getNodeSet
doc <- xmlParse(data)
doc
namespaces <- c(ns=https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml)
namespaces <- c(ns="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
namespaces
rootnode <- xmlRoot(data)
rm(list=ls())
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(url, uuseInternal = TRUE)
doc <- xmlTreeParse(url, useInternalNodes =  = TRUE)
doc <- xmlTreeParse(url, useInternal  = TRUE)
doc <- xmlTreeParse(url, useInternal = TRUE)
url <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(url, useInternal = TRUE)
doc
rootnode <- xmlRoot(doc)
xmlName(rootnode)
names(rootnode)
xpathSApply(rootnode, "//zipcode", xmlValue())
xpathSApply(rootnode, "//zipcode", xmlValue)
zips < xpathSApply(rootnode, "//zipcode", xmlValue)
zips <- xpathSApply(rootnode, "//zipcode", xmlValue)
zips
sum(zips==21231)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv" destfile="quiz1-3.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile="quiz1-3.csv")
?fread()
?fread
install.packages("data.table")
library("data.table")
?fread
DT <- fread("quiz1-3.csv")
?system.time
system.time("mean(DT$pwgtp15,by=DT$SEX)")
system.time("mean(DT$pwgtp15,by=DT$SEX)")
system.time("tapply(DT$pwgtp15,DT$SEX,mean"
mean(DT$pwgtp15,by=DT$SEX
)
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
system.time({mean(DT$pwgtp15,by=DT$SEX)})
system.time({mean(DT$pwgtp15,by=DT$SEX)})
system.time({tapply(DT$pwgtp15,DT$SEX,mean})
system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
system.time(tapply(DT$pwgtp15,DT$SEX,mean)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
mean({DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15})
mean({DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
mean({DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)}
mean(DT$pwgtp15,by=DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
sapply(split(DT$pwgtp15,DT$SEX),mean)
DT[,mean(pwgtp15),by=SEX]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT$pwgtp15,by=DT$SEX))
test1 <- function(DT) {
return(mean(DT$pwgtp15,by=DT$SEX))
}
test()
test1()
test <- function() {
return(mean(DT$pwgtp15,by=DT$SEX))
}
test
test()
system.time(test)
test2 <- function() {
return(tapply(DT$pwgtp15,DT$SEX,mean))
}
test2()
system.time(test2)
test5 <- function() {
return(DT[,mean(pwgtp15),by=SEX])
}
test6 <- function() {
return(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
}
test6 <- function() {
return({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
}
test6()
system.time(test6())
system.time(test5())
test4 <- function() {
return(sapply(split(DT$pwgtp15,DT$SEX),mean))
}
system.time(test4)
system.time(test4())
test4()
test3 <- function() {
return({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
}
test3()
?replicate
system.time(replicate(1000, test6()))
test6()
replicate(2, test6())
replicate(1000, test6())
replicate(100, test6())
system.time(replicate(100, test6()))
system.time(replicate(100, test5()))
system.time(replicate(100, test4()))
test4()
test3()
test2()
system.time(replicate(100,test2()))
test <- function() {
return(mean(DT$pwgtp15,by=DT$SEX))
test <- function() {
return(mean(DT$pwgtp15,by=DT$SEX))
test <- function() {
return(mean(DT$pwgtp15,by=DT$SEX))
}
system.time(replicate(100,test()))
system.time(replicate(1000,test()))
test()
test2()
test3()
test4()
test(5)
test5()
test6()
data <- read.csv("quiz1.csv", header=TRUE)
data[,"FES"]
data[,"WBL"]
data[,"YBL"]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
test5()
replicate(100, test6())
test6()
test6 <- function() {
return((mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)))
}
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
{mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)}
