con
head(con)
planst <- read.table(url("https://github.com/swirldev/swirl_courses/blob/master/R_Programming/Looking_at_Data/plant-data.txt"))
url("https://github.com/swirldev/swirl_courses/blob/master/R_Programming/Looking_at_Data/plant-data.txt")
read.table(url("https://github.com/swirldev/swirl_courses/blob/master/R_Programming/Looking_at_Data/plant-data.txt"))
read.table(url("https://github.com/swirldev/swirl_courses/blob/master/R_Programming/Looking_at_Data/plant-data.txt"), strip.white=TRUE)
read.table(url("https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt"))
read.table(url("https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt"), header=TRUE)
read.table(url("https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt"), header=TRUE, strip.white=TRUE)
head(url("https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt"))
url(https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt)
url("https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt")
read.table("https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt")
getURL("https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt")
thing <- ("http://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt")
ting
thing
read.table(thing)
download.file(thing, what.txt, method="curl")
download.file(thing, destfile="what.txt", method="curl")
library(RCurl)
download.file(thing, destfile="what.txt", method="curl")
thing <- getURL(thing)
download.file(thing, destfile="what.txt", method="curl")
textConnection(thing)
con(thing, mode="r")
con <- url(thing, mode="r")
con <- url(thing, "r"
)
thing
link <- "https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt"
con <- url(link, "r")
con
head(con)
readLines(con)
read.csv(readLines(con), header=TRUE)
read.csv(readLines(con))
what <- readLines(con)
what
head(con)
thing <- con
read.table(readLines(thing))
readlines(thing)
readLines(thing)
thing
thing <- "https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt"
what <- readLines(thing)
what
what <- read.csv(thing)
what
head(what)
plants
what
swirl()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
con
thing
read.table(readLines(thing), header=TRUE)
read.csv(thing)
what <- read.csv(thing)
str(ting)
str(thing)
str(what)
str(plants)
head(plants)
head(what)
what2 <- subset(what, subset=what[3:12])
?subset
what2 <- subset(what, select=what[,3:12])
what2 <- what[,3:12]
what2 == plants
plants
what
what2
class(plants)
class(what2)
class(what2[,1])
class(plants[,1])
class(plants[,5])
class(what2[,5])
thing <- what2==plants
plants2 <- as.matrix(plants)
what3 <- as.matrix(what2)
plants2 == what3
test <- what3 == plants2
test <- complete.cases(plants2) == complete.cases(what3)
test
rm(ls())
rm(list=ls())
library(swirl)
swirl()
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10, replace=FALSE)
sample(10:20, 10, replace=FALSE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace=TRUE, prob= c(.3,.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob= c(.3,.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob = .7)
play()
?dchi
?dchisq
dchisq(.001, 212)
dchisq(.999, 212)
qchisq(.001, 212)
qchisq(.999, 212)
qchisq(.999, 36)
qchisq(.999, 35)
qchisq(.001, lower.tail = TRUE 35)
qchisq(.001, lower.tail = TRUE, 35)
qchisq(.001, lower.tail = FALSE, 35)
nxt()
?rbinom
rbinom(100, size=100, .7)
rbinom(1, size=100, .7)
rbinom(1, size=1, .7)
rbinom(100, size=1, .7)
flips2 <- rbinom(100, size=1, .7)
flips2
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(mean=100, sd=25)
rnorm(100, mean=100, sd=25)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5, lambda=10)
my_pois <- replicate(100, rpois(5,10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
?plot
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim = c(10,15)
)
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(data=mtcars, formula= mpg~cyl)
boxplot(mtcars, formula= mpg~cyl)
boxplot(formula= mpg~cyl, data=mtcars)
hist(mtcars$mpg)
swirl()
swirl()
d1 <- Sys.Date()
class(d1)
d1
unclass(d1)
d1
d1 <- as.Date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
as.Date(-730)
?as.Date.numeric
as.Date(-730, 0)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays((d1))
weekdays(d1)
months(t1)
quarters(t2)
t3 <- October 17, 1986 08:24""
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units ='days')
rm(list=ls())
site <- "https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt"
data <- readLines(site)
data
data <- read.csv(readLines(site))
data <- read.table(readLines(site))
readLines(site)
read.csv(readLines(site))
site
site <- http://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt
read.csv(readLines(site))
head(readLines(site))
read.table(head(readLines(site)))
read.csv(head(readLines(site)))
?file
site <- (url="https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt", "r")
?con
?url
site <- url('https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt', "r")
data <- read.csv(readLines(site))
data <- read.table(readLines(site))
site
as.data.frame(readLines(site))
readLines(sit)
readLines(site)
site
site <- https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt
site <- "https://raw.githubusercontent.com/swirldev/swirl_courses/master/R_Programming/Looking_at_Data/plant-data.txt"
readLines(site)
as.data.frame(readLines(site))
?as.data.frame
?read.csv
read.csv(readLines(site), stringsAsFactors = FALSE)
read.csv(readLines(site), stringsAsFactors = TRUE)
library(RCurl)
site <- getURL(site)
data <- read.csv(tex=site)
data
data <- data[3:12]
head(data)
swirl()
all(data == plants)
all(as.matrix(data) == as.matrix(plants))
as.matrix(data) == as.matrix(plants)
View(data)
View(plants)
View(data)
one <- c(1,1,1)
two <- c(2,2,2)
three <- c(3,3,3)
test <- c(one, two, three)
test
test <- cbind(1,2,3)
test
test <- cbind(one, two, three)
test
test[three, 1:2]
test[,c(three, one, two)]
test[,three, one, two]
test[,(three,one, two)]
test[,order(three,one,two)]
order(test[,3])
test[,three two one]
test[,3 2 1]
test[,c(3 2 1)]
test[,c("three" "two" "one")]
test[, 1]
test[, 1:2]
test[,3 1:2]
test[, 1 2]
test[, c(1,2)]
test[, c(3,1,2)]
test[, c("three","one", "two")]
data <- EuStockMarkets
head(data)
debugSource('C:/wf/careless/psy.syn.v3.R')
install.packages("Hmisc")
x
x <- EuStockMarkets
head(x)
install.packages("Hmisc")
debugSource('C:/wf/careless/psy.syn.v3.R')
psy.syn(x,.97,FALSE)
head(x)
getItemPairs(x)
getItemPairs(x,.97)
psy.syn(x,.97)
psy.syn(x,.97)
psy.syn(x,.97)
psy.syn <- function(data, critVal=.60, anto=FALSE) {
data <- as.matrix(data)
data <- as.matrix(data)
data <- as.matrix(data)
x
data <- as.matrix(x)
x[1,1]
x
data
class(x)
what <- function(data) {}
what <- function(data) {
data <- as.matrix(data)
print(head(data))
}
what(x)
debugSource('C:/wf/careless/psy.syn.v3.R')
psy.syn(x,.97)
psy.syn(x,.97)
data[1,1]
cross_products[1]
x_squares[1]
digits(10)
psy.syn(x,.97)
psy.syn(x,.97)
cross_products[1]
options(digits=15)
cross_products[1]
x <- EuStockMarkets
head(x)
getItemPairs
getItemPairs(x, .97)
case <- x[1,]
case
DAX = case[1]
SMI = case[2]
CAC = case[3]
FTSE = case[4]
SMI * DAX
dax = DAX
smi = SMI
cac = CAC
ftse = FTSE
smi^2
dax^2
ftse*dax
ftse*dax
ftse^2
dax^2
ftse*smi
ftse^2
smi^2
smi + ftse + ftse
dax + dax + smi
2733205.375 + 3980013.5 + 4100605.16
2816019.61 + 5971180.96 + 5971180.96
2652826.5625 +  2652826.5625 + 2816019.61
6565.3/3
6565.3/3
4935.6/3
10813824.035 - (3*2188.43333333333*1645.2)
14758381.53 - (3*(2188.43333333333^2))
8121672.735 - (3*(1645.2^2))
sqrt(390660.166666707*1623.61500000022)
12592.4750000164/25184.950000003
getwd()
setwd("\c\wf\")
setwd("/c/wf")
setwd("\\c\wf")
setwd("\c")
setwd("//c/wf")
library("plyr")
library("dplyr")
library("Hmisc")
source("getData.R")
#Get Activity labels
y <- read.table("activity_labels.txt", header=FALSE)
activity_labels <- tolower(as.vector(y[,2]))
## Get column labels
x <- read.table("features.txt", header=FALSE)
features <- as.vector(x[,2])
# Read the data sets and prep them for merging
test <- getData("test", features, activity_labels)
train <- getData("train", features, activity_labels)
# 1- Merge the data sets
all <- rbind(test, train)
# 2- Drop all the variables but subject id, activity id,
# and means and std deviations
names <- colnames(all)
isin <- grepl("std()", names, fixed=TRUE) | grepl("mean()", names, fixed=TRUE)
isin[1:2]=TRUE
all <- all[,isin]
# 3 Labels were applied to the factor in the function earlier
# 4 Clean up the variable names
names <- colnames(all)
for (i in 3:length(names)) {
if(grepl("-mean()-", names[i], fixed=TRUE)) {
names[i] <- gsub("-mean()-", names[i], fixed=TRUE, replacement="Mean")
}
if(grepl("-mean()", names[i], fixed=TRUE)) {
names[i] <- gsub("-mean()", names[i], fixed=TRUE, replacement="Mean")
}
if(grepl("-std()-", names[i], fixed=TRUE)) {
names[i] <- gsub("-std()-", names[i], fixed=TRUE, replacement="Std")
}
if(grepl("-std()", names[i], fixed=TRUE)) {
names[i] <- gsub("-std()", names[i], fixed=TRUE, replacement="Std")
}
}
colnames(all) <- names
# 5 Calculate means for each variable for each subject and  activity
final <- ddply(all, .(subjectID, activityID), summarise_each, funs(mean), -subjectID, -activityID)
# Write out the tidy dataset
write.table(final, "output.txt", row.name=FALSE)
library("plyr")
library("dplyr")
library("Hmisc")
source("getData.R")
#Get Activity labels
y <- read.table("activity_labels.txt", header=FALSE)
activity_labels <- tolower(as.vector(y[,2]))
## Get column labels
x <- read.table("features.txt", header=FALSE)
features <- as.vector(x[,2])
# Read the data sets and prep them for merging
test <- getData("test", features, activity_labels)
train <- getData("train", features, activity_labels)
# 1- Merge the data sets
all <- rbind(test, train)
# 2- Drop all the variables but subject id, activity id,
# and means and std deviations
names <- colnames(all)
isin <- grepl("std()", names, fixed=TRUE) | grepl("mean()", names, fixed=TRUE)
isin[1:2]=TRUE
all <- all[,isin]
# 3 Labels were applied to the factor in the function earlier
# 4 Clean up the variable names
names <- colnames(all)
for (i in 3:length(names)) {
if(grepl("-mean()-", names[i], fixed=TRUE)) {
names[i] <- gsub("-mean()-", names[i], fixed=TRUE, replacement="Mean")
}
if(grepl("-mean()", names[i], fixed=TRUE)) {
names[i] <- gsub("-mean()", names[i], fixed=TRUE, replacement="Mean")
}
if(grepl("-std()-", names[i], fixed=TRUE)) {
names[i] <- gsub("-std()-", names[i], fixed=TRUE, replacement="Std")
}
if(grepl("-std()", names[i], fixed=TRUE)) {
names[i] <- gsub("-std()", names[i], fixed=TRUE, replacement="Std")
}
}
colnames(all) <- names
# 5 Calculate means for each variable for each subject and  activity
final <- ddply(all, .(subjectID, activityID), summarise_each, funs(mean), -subjectID, -activityID)
# Write out the tidy dataset
write.table(final, "output.txt", row.name=FALSE)
getwd()
setwd("c:/wf/coursera3/UCI HAR Dataset/")
list.files
list.files()
library("plyr")
library("dplyr")
library("Hmisc")
source("getData.R")
#Get Activity labels
y <- read.table("activity_labels.txt", header=FALSE)
activity_labels <- tolower(as.vector(y[,2]))
## Get column labels
x <- read.table("features.txt", header=FALSE)
features <- as.vector(x[,2])
# Read the data sets and prep them for merging
test <- getData("test", features, activity_labels)
train <- getData("train", features, activity_labels)
# 1- Merge the data sets
all <- rbind(test, train)
# 2- Drop all the variables but subject id, activity id,
# and means and std deviations
names <- colnames(all)
isin <- grepl("std()", names, fixed=TRUE) | grepl("mean()", names, fixed=TRUE)
isin[1:2]=TRUE
all <- all[,isin]
# 3 Labels were applied to the factor in the function earlier
# 4 Clean up the variable names
names <- colnames(all)
for (i in 3:length(names)) {
if(grepl("-mean()-", names[i], fixed=TRUE)) {
names[i] <- gsub("-mean()-", names[i], fixed=TRUE, replacement="Mean")
}
if(grepl("-mean()", names[i], fixed=TRUE)) {
names[i] <- gsub("-mean()", names[i], fixed=TRUE, replacement="Mean")
}
if(grepl("-std()-", names[i], fixed=TRUE)) {
names[i] <- gsub("-std()-", names[i], fixed=TRUE, replacement="Std")
}
if(grepl("-std()", names[i], fixed=TRUE)) {
names[i] <- gsub("-std()", names[i], fixed=TRUE, replacement="Std")
}
}
colnames(all) <- names
# 5 Calculate means for each variable for each subject and  activity
final <- ddply(all, .(subjectID, activityID), summarise_each, funs(mean), -subjectID, -activityID)
# Write out the tidy dataset
write.table(final, "output.txt", row.name=FALSE)
head(final)
write.file(colnames(all), "skel.txt" row.names=FALSE)
write.file(colnames(all), "skel.txt", row.names=FALSE)
write.table(colnames(all), "skel.txt", row.names=FALSE)
?write.table
write.table(colnames(all), "skel.txt", row.names=FALSE, quote=FALSE)
length(colnames(all))
